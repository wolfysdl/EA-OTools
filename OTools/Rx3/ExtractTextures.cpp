#include "d3dx9.h"
#include "ExtractTextures.h"
#include "ExtractNames.h"
#include "..\errormsg.h"
#include "..\D3DDevice\D3DDevice.h"

const bool extractToPNG = false;

void ExtractTexturesFromContainer(Rx3Container const &container, path const &outputDir) {
    static unsigned char ddsHeaderDXT1[128] = { 0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    static unsigned char ddsHeaderDXT3[128] = { 0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    static unsigned char ddsHeaderDXT5[128] = { 0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    static unsigned char ddsHeaderNVTT[128] = { 0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x56, 0x54, 0x54, 0x08, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x54, 0x49, 0x32, 0x41, 0x32, 0x58, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

    auto texNamesSection = container.FindFirstSection(RX3_SECTION_NAMES);
    vector<string> texNames;
    if (texNamesSection) {
        auto names = ExtractNamesFromSection(texNamesSection);
        for (auto const &[id, name] : names) {
            if (id == RX3_SECTION_TEXTURE)
                texNames.push_back(name);
        }
    }
    auto textureSections = container.FindAllSections(RX3_SECTION_TEXTURE);
    for (size_t i = 0; i < textureSections.size(); i++) {
        string texName;
        if (i < texNames.size() && !texNames[i].empty())
            texName = texNames[i];
        else
            texName = "unnamed." + to_string(i);
        if (!texName.ends_with("_coeff") && !texName.ends_with("_nm")) {
            if (texName.ends_with("_cm"))
                texName = texName.substr(0, texName.length() - 3);
            Rx3Reader reader(textureSections[i]);
            unsigned int totalSize = reader.Read<unsigned int>();
            reader.Skip(1);
            unsigned char format = reader.Read<unsigned char>();
            reader.Skip(2);
            unsigned short width = reader.Read<unsigned short>();
            unsigned short height = reader.Read<unsigned short>();
            reader.Skip(2);
            unsigned char levels = unsigned char(reader.Read<unsigned short>());

            unsigned char *ddsHeader = nullptr;
            D3DFORMAT d3dformat = D3DFMT_UNKNOWN;
            if (format == 0) {
                ddsHeader = ddsHeaderDXT1;
                d3dformat = D3DFMT_DXT1;
            }
            else if (format == 1) {
                ddsHeader = ddsHeaderDXT3;
                d3dformat = D3DFMT_DXT3;
            }
            else if (format == 2) {
                ddsHeader = ddsHeaderDXT5;
                d3dformat = D3DFMT_DXT5;
            }
            else if (format == 7) {
                ddsHeader = ddsHeaderNVTT;
                d3dformat = D3DFORMAT(MAKEFOURCC('N', 'V', 'T', 'T'));
            }
            if (d3dformat != D3DFMT_UNKNOWN) {
                FILE *file = nullptr;
                IDirect3DTexture9 *texture = nullptr;
                if (extractToPNG)
                    D3DDevice::GlobalDevice()->Interface()->CreateTexture(width, height, levels, D3DUSAGE_DYNAMIC, d3dformat, D3DPOOL_SYSTEMMEM, &texture, NULL);
                else {
                    *(unsigned short *)(&ddsHeader[12]) = height;
                    *(unsigned short *)(&ddsHeader[16]) = width;
                    ddsHeader[28] = levels;
                    _wfopen_s(&file, (outputDir / (texName + ".dds")).c_str(), L"wb");
                    if (file)
                        fwrite(ddsHeader, 128, 1, file);
                }
                for (unsigned char l = 0; l < levels; l++) {
                    reader.Skip(8);
                    unsigned int levelSize = reader.Read<unsigned int>();
                    reader.Skip(4);
                    if (file)
                        fwrite(reader.GetCurrentPtr(), 1, levelSize, file);
                    else if (texture) {
                        D3DLOCKED_RECT rect;
                        if (!FAILED(texture->LockRect(l, &rect, NULL, D3DLOCK_DISCARD))) {
                            memcpy(rect.pBits, reader.GetCurrentPtr(), levelSize);
                            if (!FAILED(texture->UnlockRect(l)))
                                D3DXSaveTextureToFileW((outputDir / (texName + ".png")).c_str(), D3DXIFF_PNG, texture, NULL);
                        }
                    }
                    reader.Skip(levelSize);
                }
                if (file)
                    fclose(file);
                if (texture)
                    texture->Release();
            }
        }
    }
}

void ExtractTexturesFromRX3(path const &rx3path, path const &outputPath) {
    Rx3Container rx3(rx3path);
    ExtractTexturesFromContainer(rx3, outputPath);
}
