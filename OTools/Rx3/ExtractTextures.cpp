#include "ExtractTextures.h"
#include "ExtractNames.h"

const bool exportCubeMapToSingleFile = true;

void ExtractTexturesFromContainer(Rx3Container const &container, path const &outputDir) {
    static unsigned char ddsHeaderDXT1[128] = { 0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    static unsigned char ddsHeaderDXT3[128] = { 0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    static unsigned char ddsHeaderDXT5[128] = { 0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    static unsigned char ddsHeaderATI1[128] = { 0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x56, 0x54, 0x54, 0x08, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x54, 0x49, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    static unsigned char ddsHeaderATI2[128] = { 0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0A, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x56, 0x54, 0x54, 0x08, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x54, 0x49, 0x32, 0x41, 0x32, 0x58, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

    create_directories(outputDir);
    auto texNamesSection = container.FindFirstSection(RX3_SECTION_NAMES);
    vector<string> texNames;
    if (texNamesSection) {
        auto names = ExtractNamesFromSection(texNamesSection);
        for (auto const &[id, name] : names) {
            if (id == RX3_SECTION_TEXTURE)
                texNames.push_back(name);
        }
    }
    auto textureSections = container.FindAllSections(RX3_SECTION_TEXTURE);
    for (size_t i = 0; i < textureSections.size(); i++) {
        string texName;
        if (i < texNames.size() && !texNames[i].empty())
            texName = texNames[i];
        else
            texName = "unnamed_" + to_string(i);
        Rx3Reader reader(textureSections[i]);
        unsigned int totalSize = reader.Read<unsigned int>();
        unsigned char type = unsigned char(reader.Read<unsigned char>());
        unsigned char *ddsHeader = nullptr;
        unsigned char format = reader.Read<unsigned char>();
        if (format == 0)
            ddsHeader = ddsHeaderDXT1;
        else if (format == 1)
            ddsHeader = ddsHeaderDXT3;
        else if (format == 2)
            ddsHeader = ddsHeaderDXT5;
        else if (format == 7)
            ddsHeader = ddsHeaderATI2;
        else if (format == 12)
            ddsHeader = ddsHeaderATI1;
        if (ddsHeader) {
            reader.Skip(2);
            unsigned short width = reader.Read<unsigned short>();
            unsigned short height = reader.Read<unsigned short>();
            unsigned short faces = reader.Read<unsigned short>();
            unsigned short levels = unsigned char(reader.Read<unsigned short>());
            if (levels > 0) {
                bool isCubemap = exportCubeMapToSingleFile && type == 3 && faces == 6;
                FILE *file = nullptr;
                for (unsigned int f = 0; f < faces; f++) {
                    for (unsigned short l = 0; l < levels; l++) {
                        reader.Skip(8);
                        unsigned int levelSize = reader.Read<unsigned int>();
                        reader.Skip(4);
                        if (l == 0 && (f == 0 || !isCubemap)) {
                            *(unsigned short *)(&ddsHeader[12]) = height;
                            *(unsigned short *)(&ddsHeader[16]) = width;
                            *(unsigned short *)(&ddsHeader[20]) = levelSize;
                            *(unsigned char *)(&ddsHeader[28]) = levels;
                            *(unsigned int *)(&ddsHeader[108]) = isCubemap ? (levels > 1 ? 0x401008 : 0x1008) : (levels > 1 ? 0x401000 : 0x1000);
                            *(unsigned int *)(&ddsHeader[112]) = isCubemap ? 0xFE00 : 0;
                            string fileName = texName;
                            if (faces > 1 && !isCubemap)
                                fileName += "._face_" + to_string(f);
                            _wfopen_s(&file, (outputDir / (fileName + ".dds")).c_str(), L"wb");
                            if (file)
                                fwrite(ddsHeader, 128, 1, file);
                        }
                        if (file)
                            fwrite(reader.GetCurrentPtr(), 1, levelSize, file);
                        reader.Skip(levelSize);
                    }
                    if (file) {
                        fclose(file);
                        file = nullptr;
                    }
                }
                if (file) {
                    fclose(file);
                    file = nullptr;
                }
            }
        }
    }
}

void ExtractTexturesFromRX3(path const &rx3path, path const &outputPath) {
    Rx3Container rx3(rx3path);
    ExtractTexturesFromContainer(rx3, outputPath);
}
